diff --git a/tools/pyliner/pyliner/apps/xtce_msg_parser.py b/tools/pyliner/pyliner/apps/xtce_msg_parser.py
index 3efe41dc8..9258f2f06 100644
--- a/tools/pyliner/pyliner/apps/xtce_msg_parser.py
+++ b/tools/pyliner/pyliner/apps/xtce_msg_parser.py
@@ -32,15 +32,20 @@ class XTCEParser:
     PARAMS_KEY = 'params'
     SPACE_SYSTEM_KEY = 'space_system'
     CONTAINERS_KEY = 'containers'
+    COMMANDS_KEY = 'commands'
     BASE_CONTAINER_KEY = 'base_container'
+    BASE_COMMAND_KEY = 'base_command'
     BASE_CONTAINER_CRITERIA_KEY = 'criteria'
+    BASE_COMNMAND_ARG_ASSIGNMENT_KEY = 'criteria'
     XTCE_OBJ_KEY = 'xtce_obj'
     INTRINSIC_KEY = 'intrinsic'
     ARRAY_TYPE_KEY = 'array_type'
     PARAM_NAME_KEY = 'name'
+    ARG_NAME_KEY = 'name'
     AGGREGATE_TYPE = 'aggregate'
     STRUCT_SEPARATOR = "."
     HOST_PARAM = 'host'
+    COMMAND_CONTAINER = "command_container"
 
     def __init__(self, xml_files: [str], root_space_system: str):
         # # Code should be inherited from XTCEManager. See https://github.com/WindhoverLabs/xtce_generator/issues/5
@@ -131,6 +136,48 @@ class XTCEParser:
 
         return containers_dict
 
+    def __get_meta_commands_map(self, spacesystem: xtce.SpaceSystemType) -> dict:
+        commands_dict = {}
+        cmd = spacesystem.get_CommandMetaData()
+        if cmd is not None:
+            meta_command_set: xtce.MetaCommandSetType
+            meta_command_set = spacesystem.get_CommandMetaData().get_MetaCommandSet()
+            if meta_command_set is not None:
+                meta_command: xtce.MetaCommandType
+                for meta_command in meta_command_set.get_MetaCommand():
+                    commands_dict[meta_command.get_name()] = {}
+                    commands_dict[meta_command.get_name()][self.XTCE_OBJ_KEY] = meta_command
+                    # container
+                    commands_dict[meta_command.get_name()][self.COMMAND_CONTAINER] = meta_command.get_CommandContainer()
+                    commands_dict[meta_command.get_name()][XTCEParser.PARAMS_KEY] = self.__get_arg_map(
+                        meta_command.get_CommandContainer(),
+                        spacesystem)
+                    if meta_command.get_BaseMetaCommand() is None:
+                        commands_dict[meta_command.get_name()][self.BASE_COMMAND_KEY] = None
+                    else:
+                        base_container: xtce.MetaCommandType = self.__get_command_from_ref(
+                            meta_command.get_BaseMetaCommand().get_metaCommandRef(), spacesystem)
+                        container_spacesystem = self.__get_spacesystem_from_ref(
+                            meta_command.get_BaseMetaCommand().get_metaCommandRef(),
+                            spacesystem)
+
+                        # commands_dict[container.get_name()][self.BASE_CONTAINER] = {}
+                        # # Store Criteria Obj in dict
+                        # commands_dict[container.get_name()][self.BASE_CONTAINER][
+                        #     self.BASE_CONTAINER_CRITERIA] = container.get_BaseContainer().get_RestrictionCriteria()
+                        # commands_dict[container.get_name()][self.BASE_CONTAINER][self.XTCE_OBJ] = base_container
+                        commands_dict[meta_command.get_name()][
+                            self.BASE_COMMAND_KEY] = self.__get_meta_commands_map(
+                            container_spacesystem)
+
+                        # Store Criteria Obj in dict
+                        commands_dict[meta_command.get_name()][self.BASE_COMMAND_KEY][
+                            self.BASE_COMNMAND_ARG_ASSIGNMENT_KEY] = meta_command.get_BaseMetaCommand().get_ArgumentAssignmentList()
+                        commands_dict[meta_command.get_name()][self.BASE_COMMAND_KEY][
+                            self.XTCE_OBJ_KEY] = base_container
+
+        return commands_dict
+
     def sanitize_type_ref(self, qualified_name: str):
         """
         Convert a qualified name such as "BaseType/string512_LE" to "string512_LE"
@@ -182,6 +229,33 @@ class XTCEParser:
                     self.__get_deepest_child(c, space_system_tokens[1:])
                     break
 
+    def __get_intrinsic_parm_type(self, tlm: xtce.TelemetryMetaDataType, param_type_ref: str) -> Union[
+        None, xtce.BaseDataType]:
+        result = None
+        if tlm.get_ParameterTypeSet() is not None:
+            if len(tlm.get_ParameterTypeSet().get_IntegerParameterType()) > 0:
+                int_type: xtce.IntegerParameterType
+                for int_type in tlm.get_ParameterTypeSet().get_IntegerParameterType():
+                    if int_type.get_name() == self.sanitize_type_ref(param_type_ref):
+                        result = int_type
+            if len(tlm.get_ParameterTypeSet().get_FloatParameterType()) > 0:
+                for float_type in tlm.get_ParameterTypeSet().get_FloatParameterType():
+                    if float_type.get_name() == self.sanitize_type_ref(param_type_ref):
+                        result = float_type
+            if len(tlm.get_ParameterTypeSet().get_StringParameterType()) > 0:
+                for string_type in tlm.get_ParameterTypeSet().get_StringParameterType():
+                    if string_type.get_name() == self.sanitize_type_ref(param_type_ref):
+                        result = string_type
+            if len(tlm.get_ParameterTypeSet().get_EnumeratedParameterType()) > 0:
+                for enum_type in tlm.get_ParameterTypeSet().get_EnumeratedParameterType():
+                    if enum_type.get_name() == self.sanitize_type_ref(param_type_ref):
+                        result = enum_type
+            if len(tlm.get_ParameterTypeSet().get_BooleanParameterType()) > 0:
+                for boolean_type in tlm.get_ParameterTypeSet().get_BooleanParameterType():
+                    if boolean_type.get_name() == self.sanitize_type_ref(param_type_ref):
+                        result = boolean_type
+        return result
+
     def __get_spacesystem_from_ref(self, param_ref: str, root: xtce.SpaceSystemType) -> xtce.SpaceSystemType:
         # Only relative references are supported at the moment
         if xtce_generator.XTCEManager.NAMESPACE_SEPARATOR in param_ref:
@@ -205,30 +279,40 @@ class XTCEParser:
             if c.get_name() == container_name:
                 return c
 
-    def __get_intrinsic_type(self, tlm: xtce.TelemetryMetaDataType, param_type_ref: str) -> Union[
+    def __get_command_from_ref(self, command_ref: str, root: xtce.SpaceSystemType) -> Union[
+        xtce.MetaCommandType]:
+        # Only relative references are supported at the moment
+        s: xtce.SpaceSystemType = self.__get_spacesystem_from_ref(command_ref, root)
+        c: xtce.MetaCommandType
+        container_name = command_ref.split(xtce_generator.XTCEManager.NAMESPACE_SEPARATOR)[-1]
+        for c in s.get_CommandMetaData().get_MetaCommandSet().get_MetaCommand():
+            if c.get_name() == container_name:
+                return c
+
+    def __get_intrinsic_arg_type(self, cmd: xtce.CommandMetaDataType, arg_type_ref: str) -> Union[
         None, xtce.BaseDataType]:
         result = None
-        if tlm.get_ParameterTypeSet() is not None:
-            if len(tlm.get_ParameterTypeSet().get_IntegerParameterType()) > 0:
-                int_type: xtce.IntegerParameterType
-                for int_type in tlm.get_ParameterTypeSet().get_IntegerParameterType():
-                    if int_type.get_name() == self.sanitize_type_ref(param_type_ref):
+        if cmd.get_ArgumentTypeSet() is not None:
+            if len(cmd.get_ArgumentTypeSet().get_IntegerArgumentType()) > 0:
+                int_type: xtce.IntegerArgumentType
+                for int_type in cmd.get_ArgumentTypeSet().get_IntegerArgumentType():
+                    if int_type.get_name() == self.sanitize_type_ref(arg_type_ref):
                         result = int_type
-            if len(tlm.get_ParameterTypeSet().get_FloatParameterType()) > 0:
-                for float_type in tlm.get_ParameterTypeSet().get_FloatParameterType():
-                    if float_type.get_name() == self.sanitize_type_ref(param_type_ref):
+            if len(cmd.get_ArgumentTypeSet().get_FloatArgumentType()) > 0:
+                for float_type in cmd.get_ArgumentTypeSet().get_FloatArgumentType():
+                    if float_type.get_name() == self.sanitize_type_ref(arg_type_ref):
                         result = float_type
-            if len(tlm.get_ParameterTypeSet().get_StringParameterType()) > 0:
-                for string_type in tlm.get_ParameterTypeSet().get_StringParameterType():
-                    if string_type.get_name() == self.sanitize_type_ref(param_type_ref):
+            if len(cmd.get_ArgumentTypeSet().get_StringArgumentType()) > 0:
+                for string_type in cmd.get_ArgumentTypeSet().get_StringArgumentType():
+                    if string_type.get_name() == self.sanitize_type_ref(arg_type_ref):
                         result = string_type
-            if len(tlm.get_ParameterTypeSet().get_EnumeratedParameterType()) > 0:
-                for enum_type in tlm.get_ParameterTypeSet().get_EnumeratedParameterType():
-                    if enum_type.get_name() == self.sanitize_type_ref(param_type_ref):
+            if len(cmd.get_ArgumentTypeSet().get_EnumeratedArgumentType()) > 0:
+                for enum_type in cmd.get_ArgumentTypeSet().get_EnumeratedArgumentType():
+                    if enum_type.get_name() == self.sanitize_type_ref(arg_type_ref):
                         result = enum_type
-            if len(tlm.get_ParameterTypeSet().get_BooleanParameterType()) > 0:
-                for boolean_type in tlm.get_ParameterTypeSet().get_BooleanParameterType():
-                    if boolean_type.get_name() == self.sanitize_type_ref(param_type_ref):
+            if len(cmd.get_ArgumentTypeSet().get_BooleanArgumentType()) > 0:
+                for boolean_type in cmd.get_ArgumentTypeSet().get_BooleanArgumentType():
+                    if boolean_type.get_name() == self.sanitize_type_ref(arg_type_ref):
                         result = boolean_type
         return result
 
@@ -241,7 +325,7 @@ class XTCEParser:
         tlm = spacesystem.get_TelemetryMetaData()
         if tlm is not None:
             if tlm.get_ParameterTypeSet() is not None:
-                param_type = self.__get_intrinsic_type(tlm, param_type_ref)
+                param_type = self.__get_intrinsic_parm_type(tlm, param_type_ref)
                 if param_type is not None:
                     out_dict[XTCEParser.INTRINSIC_KEY] = param_type
                 else:
@@ -258,7 +342,7 @@ class XTCEParser:
                                         ref_spacesystem = self.__get_spacesystem_from_ref(array_type.get_arrayTypeRef(),
                                                                                           spacesystem)
 
-                                        item_param_type = self.__get_intrinsic_type(
+                                        item_param_type = self.__get_intrinsic_parm_type(
                                             ref_spacesystem.get_TelemetryMetaData(), array_type.get_arrayTypeRef())
                                         if item_param_type is not None:
                                             out_dict[XTCEParser.ARRAY_TYPE_KEY].append(item_param_type)
@@ -292,7 +376,7 @@ class XTCEParser:
                     tlm = s.get_TelemetryMetaData()
                     if tlm is not None:
                         if tlm.get_ParameterTypeSet() is not None:
-                            param_type = self.__get_intrinsic_type(tlm, param_type_ref)
+                            param_type = self.__get_intrinsic_parm_type(tlm, param_type_ref)
                             if param_type is not None:
                                 out_dict[self.INTRINSIC_KEY] = param_type
                             else:
@@ -308,7 +392,7 @@ class XTCEParser:
                                                     ref_spacesystem = self.__get_spacesystem_from_ref(
                                                         array_type.get_arrayTypeRef(),
                                                         spacesystem)
-                                                    item_param_type = self.__get_intrinsic_type(
+                                                    item_param_type = self.__get_intrinsic_parm_type(
                                                         ref_spacesystem.get_TelemetryMetaData(),
                                                         array_type.get_arrayTypeRef())
                                                     if item_param_type is not None:
@@ -346,6 +430,120 @@ class XTCEParser:
                                                                       out_dict["fields"][member.get_name()])
                                             return
 
+    # TODO: Get xtce.ParameterType(Aggregate in this case) from spacesystem
+    def __get_arg_type(self, param_type_ref: str, spacesystem: xtce.SpaceSystemType,
+                       host_param: str = None, out_dict: dict = {}):
+        """
+        For now it is assumed that param_type_ref points to a AggregateParameterType
+        """
+        cmd = spacesystem.get_CommandMetaData()
+        if cmd is not None:
+            if cmd.get_ArgumentTypeSet() is not None:
+                arg_type = self.__get_intrinsic_arg_type(cmd, param_type_ref)
+                if arg_type is not None:
+                    out_dict[XTCEParser.INTRINSIC_KEY] = arg_type
+                else:
+                    if len(cmd.get_ArgumentTypeSet().get_ArrayArgumentType()) > 0:
+                        array_type: xtce.ArrayParameterType
+                        for array_type in cmd.get_ArgumentTypeSet().get_ArrayArgumentType():
+                            if array_type.get_name() == self.sanitize_type_ref(param_type_ref):
+                                dim: xtce.DimensionType
+                                out_dict[XTCEParser.ARRAY_TYPE_KEY] = []
+                                # TODO:Add support for multi-dimensional array
+                                for dim in array_type.get_DimensionList().get_Dimension():
+                                    for i in range(dim.get_StartingIndex().get_FixedValue(),
+                                                   dim.get_EndingIndex().get_FixedValue() + 1):
+                                        ref_spacesystem = self.__get_spacesystem_from_ref(array_type.get_arrayTypeRef(),
+                                                                                          spacesystem)
+
+                                        item_param_type = self.__get_intrinsic_parm_type(
+                                            ref_spacesystem.get_TelemetryMetaData(), array_type.get_arrayTypeRef())
+                                        if item_param_type is not None:
+                                            out_dict[XTCEParser.ARRAY_TYPE_KEY].append(item_param_type)
+                                        else:
+                                            # FIXME:Array of structs
+                                            out_dict[XTCEParser.ARRAY_TYPE_KEY].append(item_param_type)
+                                return
+                    if len(cmd.get_ArgumentTypeSet().get_AggregateArgumentType()) > 0:
+                        # FIXME: Check for intrinsic types and make this function recursive
+                        aggregate: xtce.AggregateArgumentType
+                        for aggregate in cmd.get_ArgumentTypeSet().get_AggregateArgumentType():
+                            if aggregate.get_name() == self.sanitize_type_ref(param_type_ref):
+                                member: xtce.MemberType
+                                out_dict["fields"] = dict()
+                                out_dict[IntrinsicDataType.AGGREGATE] = IntrinsicDataType.AGGREGATE
+                                out_dict[XTCEParser.HOST_PARAM] = host_param
+                                out_dict[XTCEParser.ARG_NAME_KEY] = aggregate.get_name()
+                                for member in aggregate.get_MemberList().get_Member():
+                                    # TODO:Parse fields
+                                    out_dict["fields"][member.get_name()] = dict()
+                                    out_dict["fields"][member.get_name()][XTCEParser.ARG_NAME_KEY] = member.get_name()
+                                    ref_spacesystem = self.__get_spacesystem_from_ref(member.get_typeRef(), spacesystem)
+                                    self.__get_param_type(member.get_typeRef(),
+                                                          ref_spacesystem,
+                                                          aggregate.get_name(),
+                                                          out_dict["fields"][member.get_name()])
+                                return
+
+            else:
+                for s in spacesystem.get_SpaceSystem():
+                    cmd = s.get_CommandMetaData()
+                    if cmd is not None:
+                        if cmd.get_ArgumentTypeSet() is not None:
+                            arg_type = self.__get_intrinsic_arg_type(cmd, param_type_ref)
+                            if arg_type is not None:
+                                out_dict[self.INTRINSIC_KEY] = arg_type
+                            else:
+                                if len(cmd.get_ArgumentTypeSet().get_ArrayArgumentType()) > 0:
+                                    for array_type in cmd.get_ArgumentTypeSet().get_ArrayArgumentType():
+                                        if array_type.get_name() == self.sanitize_type_ref(param_type_ref):
+                                            dim: xtce.DimensionType
+                                            out_dict[XTCEParser.ARRAY_TYPE_KEY] = []
+                                            # TODO:Add support for multi-dimensional array
+                                            for dim in array_type.get_DimensionList().get_Dimension():
+                                                for i in range(dim.get_StartingIndex().get_FixedValue(),
+                                                               dim.get_EndingIndex().get_FixedValue() + 1):
+                                                    ref_spacesystem = self.__get_spacesystem_from_ref(
+                                                        array_type.get_arrayTypeRef(),
+                                                        spacesystem)
+                                                    item_param_type = self.__get_intrinsic_parm_type(
+                                                        ref_spacesystem.get_TelemetryMetaData(),
+                                                        array_type.get_arrayTypeRef())
+                                                    if item_param_type is not None:
+                                                        out_dict[XTCEParser.ARRAY_TYPE_KEY].append(item_param_type)
+                                                    else:
+                                                        # FIXME:Array of structs
+                                                        out_dict[XTCEParser.ARRAY_TYPE_KEY].append(item_param_type)
+                                            return
+                                if len(cmd.get_ArgumentTypeSet().get_AggregateArgumentType()) > 0:
+                                    # FIXME: Check for intrinsic types and make this function recursive
+                                    aggregate: xtce.AggregateArgumentType
+                                    for aggregate in cmd.get_ArgumentTypeSet().get_AggregateArgumentType():
+
+                                        if aggregate.get_name() == self.sanitize_type_ref(param_type_ref):
+                                            member: xtce.MemberType
+                                            out_dict["fields"] = dict()
+                                            out_dict[IntrinsicDataType.AGGREGATE] = IntrinsicDataType.AGGREGATE
+                                            out_dict[XTCEParser.ARG_NAME_KEY] = aggregate.get_name()
+                                            out_dict[XTCEParser.HOST_PARAM] = host_param
+                                            for member in aggregate.get_MemberList().get_Member():
+                                                # TODO:Parse fields
+                                                # out_dict[member.get_name()] = dict()
+                                                # self.__get_param_type(member.get_typeRef(), spacesystem,
+                                                #                       out_dict[member.get_name()])
+
+                                                out_dict["fields"][member.get_name()] = dict()
+                                                out_dict["fields"][member.get_name()][
+                                                    XTCEParser.ARG_NAME_KEY] = member.get_name()
+
+                                                ref_spacesystem = self.__get_spacesystem_from_ref(
+                                                    member.get_typeRef(), spacesystem)
+                                                self.__get_param_type(member.get_typeRef(),
+                                                                      ref_spacesystem,
+                                                                      aggregate.get_name(),
+                                                                      out_dict["fields"][member.get_name()])
+                                            return
+
     def __get_param_type_map(self, param_ref: str, spacesystem: xtce.SpaceSystemType):
         parameter_type_dict = dict()
         tlm = spacesystem.get_TelemetryMetaData()
@@ -374,6 +572,35 @@ class XTCEParser:
 
         return param_dict
 
+    def __get_arg_type_map(self, arg_ref: str, command: xtce.CommandContainerType, spacesystem: xtce.SpaceSystemType):
+        argument_type_dict = dict()
+        # cmd = spacesystem.get_CommandMetaData()
+        if command is not None:
+            if command.get_EntryList() is not None:
+                arg: xtce.ArgumentArgumentRefEntryType
+                for arg in command.get_EntryList():
+                    # get_ArgumentRefEntry().get_argumentRef()
+                    if arg_ref == arg.ArgumentArgumentRefEntryType:
+                        argument_type_dict[arg.get_name()] = dict()
+                        argument_type_dict[arg.get_name()][XTCEParser.ARG_NAME_KEY] = arg.get_name()
+                        self.__get_arg_type(arg.get_argumentTypeRef(), spacesystem, arg.get_name(),
+                                            argument_type_dict[arg.get_name()])
+
+        return argument_type_dict
+
+    def __get_arg_map(self, command: xtce.CommandContainerType, spacesystem: xtce.SpaceSystemType):
+        entry: xtce.ArgumentArgumentRefEntryType
+        arg_dict = {}
+        # TODO:Use ordered dict for params
+        # In python 3.7+, ordered dicts are law:https://mail.python.org/pipermail/python-dev/2017-December/151283.html
+        for entry in command.get_EntryList().get_ArgumentRefEntry():
+            ref = entry.get_argumentRef()
+            # TODO:Query the ParameterSet
+            arg_dict[ref] = self.__get_arg_type_map(ref, command, spacesystem)
+            arg_dict[ref][XTCEParser.ARG_NAME_KEY] = ref
+
+        return arg_dict
+
     def __map_all_containers(self):
         """
         Maps all of the containers inside XTCE. {'CI_HK_TLM_MID': {'CI_HK_TLM_MID': {'name': 'CI_HK_TLM_MID',
@@ -386,7 +613,7 @@ class XTCEParser:
         0x7f60d08eebe0>}}, 'name': 'CI_HK_TLM_MID'}}
         """
         self.__map_tlm_containers()
-        self.__map_commands()
+        # self.__map_commands()
 
     def __map_tlm_containers(self):
         qualified_name: str
@@ -398,14 +625,14 @@ class XTCEParser:
                     self.__namespace_dict[qualified_name][self.SPACE_SYSTEM_KEY])
 
     def __map_commands(self):
-        #FIXME:Update for commands
-        # qualified_name: str
-        # spacesystem: xtce.SpaceSystemType
-        # for qualified_name in self.__namespace_dict.keys():
-        #     logging.info(f"Parsing containers for'{qualified_name}'")
-        #     if self.__namespace_dict[qualified_name][self.SPACE_SYSTEM_KEY] is not None:
-        #         self.__namespace_dict[qualified_name][XTCEParser.CONTAINERS_KEY] = self.__get_seq_containers_map(
-        #             self.__namespace_dict[qualified_name][self.SPACE_SYSTEM_KEY])
+        # FIXME:Update for commands
+        qualified_name: str
+        spacesystem: xtce.SpaceSystemType
+        for qualified_name in self.__namespace_dict.keys():
+            logging.info(f"Parsing containers for'{qualified_name}'")
+            if self.__namespace_dict[qualified_name][self.SPACE_SYSTEM_KEY] is not None:
+                self.__namespace_dict[qualified_name][XTCEParser.COMMANDS_KEY] = self.__get_meta_commands_map(
+                    self.__namespace_dict[qualified_name][self.SPACE_SYSTEM_KEY])
 
     def __map_all_spacesystems(self, root: xtce.SpaceSystemType, out: list, depth: int = 0):
         """
@@ -563,6 +790,78 @@ class XTCEParser:
 
         return value
 
+    def craft_tlm_command(self, path: str, args: dict) -> bytes:
+        """
+              Returns the value inside of the packet that path points to, but only if packet is valid.
+              The packet is validated based on XTCE rules such as criteria for containers.
+              If the packet is not valid, None is returned.
+              """
+        value = None
+        # TODO: Query endian from XTCE
+        bits = bitarray(endian='big')
+        packet = bytes()
+        bits.frombytes(packet)
+        # FIXME:At the moment this
+        container_map = self.query_container_from_qualified_name(path)
+        # TODO: Extract endian from the params
+        container_bits = bitarray(endian='little')
+        container_bits.frombytes(packet)
+        base_container_key = list(container_map[self.BASE_CONTAINER_KEY].keys())[0]
+
+        base_container_size = get_bit_size_from_container(
+            container_map[self.BASE_CONTAINER_KEY][base_container_key][XTCEParser.PARAMS_KEY])
+        container_size = get_bit_size_from_container(container_map[XTCEParser.PARAMS_KEY])
+        param_name = self.__get_param_name(path)
+        for arg in args:
+            param_offset = get_offset(container_map[XTCEParser.PARAMS_KEY],
+                                      arg)
+            print(f"param offset:offset:{param_offset}")
+        param_offset = get_offset(container_map[XTCEParser.PARAMS_KEY],
+                                  param_name)
+
+        param_value_size = get_param_bit_size(
+            container_map[XTCEParser.PARAMS_KEY],
+            param_name)
+
+        # FIXME: Need to handle the case when the param is an array.
+        value_bits = container_bits[
+                     base_container_size + param_offset:base_container_size + param_offset + param_value_size]
+
+        i_type = get_param_intrinsic_type(container_map[XTCEParser.PARAMS_KEY], param_name)
+        # FIXME:Check byte order
+        if type(i_type) == xtce.IntegerParameterType:
+            value = ba2int(value_bits)
+        elif type(i_type) == xtce.FloatParameterType:
+            # >> > struct.unpack('f', b)  # native byte order (little-endian on my machine)
+            # (1.7230105268977664e+16,)
+            # >> > struct.unpack('>f', b)  # big-endian
+            # (-109.22724914550781,)
+            value = struct.unpack('f', value_bits.tobytes())[0]  # little-endian
+
+        elif type(i_type) == xtce.BooleanParameterType:
+            value = bool(ba2int(value_bits))  # little-endian
+
+        elif type(i_type) == xtce.StringParameterType:
+            value = value_bits.tobytes().decode('utf-8')  # little-endian
+
+        elif type(i_type) == xtce.EnumeratedParameterType:
+            # FIXME:Implement properly
+            value = ba2int(value_bits)  # little-endian
+            for enum in i_type.get_EnumerationList().get_Enumeration():
+                enum: xtce.ValueEnumerationType()
+
+                if enum.get_value() == value:
+                    value = enum.get_label()
+
+        elif type(i_type) == List[xtce.BaseDataType]:
+            value = []
+            for item in i_type:
+                pass
+        else:
+            logging.warning(f"The packet for {path} is valid, but no type for it was found.")
+
+        return packet
+
 
 class Evaluator(ABC):
     # @abstractmethod
@@ -611,14 +910,23 @@ def get_offset(params, param_name) -> int:
                     name_path = param_name.split(XTCEParser.STRUCT_SEPARATOR)
                     aggregate_name = name_path[0]
 
-                    # if aggregate_name == params[XTCEParser.HOST_PARAM]:
-                    new_name = XTCEParser.STRUCT_SEPARATOR.join(name_path[1:])
-                    if XTCEParser.STRUCT_SEPARATOR in new_name:
-                        for field in params["fields"]:
-                            offset += get_offset(params["fields"][field], new_name)
+                    if aggregate_name == params[XTCEParser.HOST_PARAM]:
+                        new_name = XTCEParser.STRUCT_SEPARATOR.join(name_path[1:])
+                        if XTCEParser.STRUCT_SEPARATOR in new_name:
+                            for field in params["fields"]:
+                                offset += get_offset(params["fields"][field], new_name)
 
                         # nested struct
-                    else:
+                    # else: Should not happen
+                    #     # This is a field. Subscribing to structs is not supported at the moment
+                    #     field_name = name_path[-1]
+                    #     for field in params["fields"]:
+                    #         if field == field_name:
+                    #             break
+                    #         offset += get_offset(params["fields"][field], field_name)
+                else:
+                    if params[XTCEParser.PARAM_NAME_KEY] == param_name:
+                        name_path = param_name.split(XTCEParser.STRUCT_SEPARATOR)
                         # This is a field. Subscribing to structs is not supported at the moment
                         field_name = name_path[-1]
                         for field in params["fields"]:
@@ -626,6 +934,7 @@ def get_offset(params, param_name) -> int:
                                 break
                             offset += get_offset(params["fields"][field], field_name)
 
+
                     # else:
                     #     pass
                     #     Should not happen. This will mean either there is a bug in our code or the path is incorrect.
@@ -679,6 +988,7 @@ def get_bit_size_from_container(params) -> int:
                     offset += get_bit_size_from_container(params[p])
     return offset
 
+
 #  FIXME:Add bool flag to know whether you have found the param or not. Or this is a possible solution
 #  to having multiple keys with the same name across multiple levels of the dict.
 def get_param_bit_size(params, param_name) -> int:
@@ -688,7 +998,7 @@ def get_param_bit_size(params, param_name) -> int:
     size = 0
     # TODO:Handle this better as there may be a param name called "name" in the XTCE
     if XTCEParser.INTRINSIC_KEY in params and params[XTCEParser.PARAM_NAME_KEY] == param_name:
-            size = get_bit_size(params[XTCEParser.INTRINSIC_KEY])
+        size = get_bit_size(params[XTCEParser.INTRINSIC_KEY])
     elif XTCEParser.ARRAY_TYPE_KEY in params and params[XTCEParser.PARAM_NAME_KEY] == param_name:
         for p in params[XTCEParser.ARRAY_TYPE_KEY]:
             size += get_bit_size(p)
